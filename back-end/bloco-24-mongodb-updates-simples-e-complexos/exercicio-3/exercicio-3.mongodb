db.movies.drop();

db.movies.insertMany([
  {
    title: "Batman",
    category: [
      "action",
      "adventure",
    ],
    imdbRating: 7.7,
    budget: 35,
  },
  {
    title: "Godzilla",
    category: [
      "action",
      "adventure",
      "sci-fi",
    ],
    imdbRating: 6.6,
    budget: 1,
  },
  {
    title: "Home Alone",
    category: [
      "family",
      "comedy",
    ],
    imdbRating: 7.4,
  },
]);

// Exercício 1: Adicione a categoria "superhero" ao filme Batman .

db.movies.updateOne(
  { title: "Batman" },
  { $push: { category: "superhero" } }
);

// Exercício 2: Utilizando o modificador $each , adicione as categorias "villain" e "comic-based" ao filme Batman .

db.movies.updateOne(
  { title: "Batman" },
  { $push: {
    category: { $each: [ "villain", "comic-based" ] }
  } }
);

// Exercício 3: Remova a categoria "action" do filme Batman .

db.movies.updateOne(
  { title: "Batman" },
  { $pull: { category: "action" }}
);

// Exercício 4: Remova o primeiro elemento do array category do filme Batman .

db.movies.updateOne(
  { title: "Batman" },
  { $pop: { category: -1 } }
);

// -1 é o primeiro e 1 é o último
// Basta lembrar que o número negativo vem antes do positivo

db.movies.updateOne(
  { title: "Batman" },
  { $addToSet: {
    category: {
      $each: ["superhero", "villain", "comic-based"]
      }
    }
  }
);

db.movies.updateOne(
  { title: "Batman" },
  { $set: { category: [] } }
);

db.movies.updateOne(
  { title: "Batman" },
  { $push: { category: { $each: ["superhero", "villain", "comic-based"] } } }
);

// Exercício 5: Remova o último elemento do array category do filme Batman .

db.movies.updateOne(
  { title: "Batman" },
  { $pop: { category: 1 } }
);

// Exercício 6: Adicione o elemento "action" ao array category do filme Batman , garantindo que esse valor não se duplique.

db.movies.updateOne(
  { title: "Batman" },
  { $addToSet: { category: "action" } }
);

// Exercício 7: Adicione a categoria "90's" aos filmes Batman e Home Alone .

db.movies.updateMany(
  { title: { $in: [ "Batman", "Home Alone" ] } },
  { $addToSet: { category: "90's" } }
);

// Exercício 8: Crie um array de documentos chamado cast para o filme Home Alone com os seguintes dados

db.movies.updateOne(
  { title: "Home Alone" },
  { $push: {
      cast: { $each: [
        {
          "actor": "Macaulay Culkin",
          "character": "Kevin"
        },
        {
          "actor": "Joe Pesci",
          "character": "Harry"
        },
        {
          "actor": "Daniel Stern"
        }
      ]
    }
  }
});


// Exercício 9: Adicione o campo character com o valor Marv ao array de cast em que o campo actor seja igual a Daniel Stern no filme Home Alone .

db.movies.updateOne(
  { title: "Home Alone" },
  { $set: {
      "cast.$[elem].character": "Marv",
    },
  },
  { arrayFilters: [ { "elem.actor": "Daniel Stern" } ] }
);

// Exercício 10: Crie um array de documentos chamado cast para o filme Batman com os seguintes dados:

db.movies.updateOne(
  { title: "Batman" },
  { $push: {
      cast: {
        $each: [
          {"character": "Batman"},
          {"character": "Alfred"},
          {"character": "Coringa"}
        ]
      }
    }
  }
);

// Exercício 11: Produza três querys para o filme Batman :
// Adicione o campo actor , que deve ser um array com o valor Christian Bale , ao array de cast em que o campo character seja igual a Batman ;
// Adicione o campo actor , que deve ser um array com o valor Michael Caine , ao array de cast em que o campo character seja igual a Alfred ;
// Adicione o campo actor , que deve ser um array com o valor Heath Ledger , ao array de cast em que o campo character seja igual a Coringa .


db.movies.updateOne(
  { title: "Batman" },
  { $push: { "cast.$[elem].actor": "Christian Bale" } },
  { arrayFilters: [ { "elem.character": "Batman" } ] }
);

// Foi necessário deletar o actor pois na primeira vez fiz o update com o operador $set, daí o valor da chave key foi como string, quando o requisito pedia que fosse um array, ou seja, o insert deveria ter sido feito com o operador $push.

// Abaixo a sintaxe para extrair o atributo de um item (objeto) que está aninhado num array (valor de um atributo do documento).
db.movies.updateOne(
  { title: "Batman" }, // filtra o documento
  { $unset: { "cast.$[elem].actor": "" }}, // operação $unset para deletar atributo + declaração da variável que será deletada (basta informar o valor como "");
  { arrayFilters: [ { "elem.character": "Batman" } ] } // filtra o array (valor do atributo do documento).
);

// Incluindo o nome do actor que fez o personagem "Alfred"
db.movies.updateOne(
  { title: "Batman" },
  { $push: { "cast.$[elem].actor": "Michael Caine" } },
  { arrayFilters: [ { "elem.character": "Alfred" } ] }
);

// Incluindo o nome do actor que fez o personagem "Coringa"
db.movies.updateOne(
  { title: "Batman" },
  { $push: { "cast.$[elem].actor": "Heath Ledger" } },
  { arrayFilters: [ { "elem.character": "Coringa" } ] }
);


// Exercício 12: Adicione aos atores de cast do character Batman do filme Batman os valores "Michael Keaton" , "Val Kilmer" e "George Clooney" , e deixe o array em ordem alfabética.

db.movies.updateOne(
  { title: "Batman" },
  {
    $push: {
      "cast.$[index].actor": {
        $each: [
          "Christian Bale",
          "Michael Keaton",
          "Val Kilmer",
          "George Clooney"
        ],
        $sort: 1, // Melhor forma de fazer é junto com o "push"
      },
    },
  },
  {
    arrayFilters: [
      { "index.character": "Batman" }
    ]
  },
);

// Para consultar o documento:
db.movies.find({ title: { $in: [ "Batman" ] } });
