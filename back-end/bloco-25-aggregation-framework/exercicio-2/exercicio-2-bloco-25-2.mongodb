// Exercício 1 : Utilize uma combinação das expressões aritméticas e adicione um campo chamado idade à coleção clientes . Algumas dicas:
// arredonde para baixo o valor da idade;
// calcule a idade usando a diferença entre a data corrente e a data de nascimento;
// 1 dia é igual a 86400000 milissegundos.

db.clientes.aggregate([
  {
    $addFields: {
      idade: {
        $floor: {
          $divide: [{ $subtract: [ new Date(), "$dataNascimento" ]}, 365 * 86400000]
        }
      }
    }
  }
]);

// outra forma de fazer

db.clientes.aggregate([
  {
    addFields: {
    idade: {
    floor:{
    divide: [
            { $subtract: ["$$NOW", "$dataNascimento"] },
            { $multiply: [86400000, 365] }
          ]
        }
      }
    }
  }
]);

// Exercício 2 : Utilizando o novo campo idade , conte quantos clientes têm entre 18 e 25 anos.

db.clientes.aggregate([
  {
    $addFields: {
      idade: {
        $floor: {
          $divide: [
            { $subtract: [ new Date(), "$dataNascimento" ] },
            365 * 86400000
          ]
        }
      }
    }
  },
  {
    $match: {
      idade: {
        $gte: 18,
        $lte: 25
      }
    }
  },
  { $count: "beetween18and25" }
]);

// Exercício 3 : Remova os estágios $count e $match do exercício anterior e adicione um estágio no pipeline que coloque as compras do cliente no campo compras .

db.clientes.aggregate([
  {
    $addFields: {
      idade: {
        $floor: {
          $divide: [
            {$subtract: [ "$$NOW", "$dataNascimento" ]},
            365 * 86400000
          ]
        }
      }
    }
  },
  {
    $lookup: {
      from: 'vendas',
      let: { purchaseNotAllowed: "PAGAMENTO NAO APROVADO", clienteId: "$clienteId" },
      // localField: 'clienteId',
      // foreignField: 'clienteId',
      pipeline: [
        { $match:
          { $expr:
            { $and: [
              { $not: { $eq: [ "$status", "$$purchaseNotAllowed" ] } },
              { $eq: [ "$clienteId", "$$clienteId" ] }
            ]}
          }
        },
        { $project: { _id: false, itens: true } }
      ],
      as: 'compras'
    }
  },
]);

// Exercício 4 : Selecione TODOS os clientes que compraram entre Junho de 2019 e Março de 2020 .

// Deve-se iniciar pela collection clientes, pois a regra de negócio quer saber a quantidade de clientes ao invés de vendas durante o periodo especificado
db.vendas.aggregate([
  {
    $match: {
      $expr: {
        $and: [
          { $not: { $eq: [ "$status", "PAGAMENTO NAO APROVADO" ] } },
          { $gte: [ "$dataVenda", ISODate('2019-06-01') ] },
          { $lte: [ "$dataVenda", ISODate('2020-03-31') ] }
        ]
      }
    }
  },
]);

db.clientes.aggregate([
  {
    $lookup: {
      from: 'vendas',
      // localField: 'clienteId',
      // foreignField: 'clienteId',
      let: {
        clienteId: "$clienteId",
        startDate: ISODate('2019-06-01'),
        endDate: ISODate('2020-03-31')
      },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                // { $not: { $eq: [ "$status", "PAGAMENTO NAO APROVADO" ] } },
                { $eq: [ "$clienteId", "$$clienteId" ] },
                { $gte: [ "$dataVenda", "$$startDate" ] },
                { $lte: [ "$dataVenda", "$$endDate" ] }
                // {
                //   dataVenda: {
                //     $gte: { $millisecond: ISODate('2019-06-01') },
                //     $lte: { $millisecond: ISODate('2020-03-31') }
                //   }
                // }
              ]
            }
          }
        },
      ],
      as: 'compras'
    }
  },
    {
    $match: {
      "compras.dataVenda": {
        $gte: ISODate('2019-06-01'),
        $lte: ISODate('2020-03-31')
      }
    }
  }
]).itcount();



// Exercício 5 : Confira o número de documentos retornados pelo pipeline com o método itcount() . Até aqui, você deve ter 486 documentos sendo retornados.

db.clientes.aggregate([
  // {
  //   $addFields: {
  //     idade: {
  //       $floor:{
  //         $divide: [
  //           { $subtract: ["$$NOW", "$dataNascimento"]},
  //           { $multiply: [86400000, 365] }
  //         ]
  //       }
  //     }
  //   }
  // },
  {
    $lookup: {
      from: 'vendas',
      localField: 'clienteId',
      foreignField: 'clienteId',
      as: 'compras'
    }
  },
  {
    $match: {
      "compras.dataVenda": {
        $gte: ISODate('2019-06-01'),
        $lte: ISODate('2020-03-31')
      }
    }
  }
]).itcount();

// db.vendas.aggregate([
//   {
//     $match: {
//       $expr: {
//         $and: [
//           { $not: { $eq: [ "$status", "PAGAMENTO NAO APROVADO" ] } },
//           { $gte: [ "$dataVenda", ISODate('2019-06-01') ] },
//           { $lte: [ "$dataVenda", ISODate('2020-03-31') ] }
//         ]
//       }
//     }
//   },
// ]).itcount();


// Exercício 6 : Ainda nesse pipeline , descubra os 5 estados com mais compras.

db.clientes.aggregate([
  // {
  //   $addFields: {
  //     idade: {
  //       $floor:{
  //         $divide: [
  //           { $subtract: ["$$NOW", "$dataNascimento"]},
  //           { $multiply: [86400000, 365] }
  //         ]
  //       }
  //     }
  //   }
  // },
  {
    $lookup: {
      from: 'vendas',
      localField: 'clienteId',
      foreignField: 'clienteId',
      as: 'compras'
    }
  },
  {
    $match: {
      "compras.dataVenda": {
        $gte: ISODate('2019-06-01'),
        $lte: ISODate('2020-03-31')
      }
    }
  },
  { $unwind: "$compras" },
  {
    $group: {
      _id: "$endereco.uf",
      valorTotal: { $sum: "$compras.valorTotal" }
    }
  },
  { $sort: { valorTotal: -1 } },
  { $limit: 5 },
]);


// Exercício 7 : Descubra o cliente que mais consumiu QUEIJO PRATO . Retorne um documento com a seguinte estrutura:

// {
//   "nomeCliente": "NOME",
//   "uf": "UF DO CLIENTE",
//   "totalConsumido": 100
// }

db.vendas.aggregate([
  { $unwind: "$itens" },
  {
    $match: {
      "itens.nome": "QUEIJO PRATO"
    }
  },
  {
    $group: {
      _id: "$clienteId",
      consumo: {
        $sum: "$itens.quantidade"
      }
    }
  },
  { $sort: { consumo: -1 } },
  { $limit: 1 },
  {
    $lookup: {
      from: 'clientes',
      localField: '_id',
      foreignField: 'clienteId',
      as: 'dadosCliente'
    }
  },
  { $unwind: "$dadosCliente" },
  {
    $project: {
      _id: false,
      nomeCliente: "$dadosCliente.nome",
      uf: "$dadosCliente.endereco.uf",
      totalConsumido: "$consumo"
    }
  },
]);


// Exercício 8 : Selecione todas as vendas do mês de Março de 2020 , com status EM SEPARACAO . Acrescente um campo chamado dataEntregaPrevista com valor igual a três dias após a data da venda. Retorne apenas os campos clienteId , dataVenda e dataEntregaPrevista .


