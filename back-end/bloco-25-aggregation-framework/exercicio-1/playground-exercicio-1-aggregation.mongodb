db.clientes.count(); // 499
db.produtos.count(); // 499
db.vendas.count(); // 4900

// Exercício 1: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "MASCULINO" .

// aggregate sempre receberá um array com os parâmetros
db.clientes.aggregate([
{ $match: {"sexo": "MASCULINO" } }
]);

// Exercício 2: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 .

db.clientes.aggregate([
  { $match: {
      sexo: "FEMININO",
      dataNascimento: {
        $gte: ISODate("1995-01-01"),
        $lte: ISODate("2005-12-31")
      }
    }
  }
]);

// Exercício 3: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 , limitando a quantidade de documentos retornados em 5 .

db.clientes.aggregate([
  { $match: {
      sexo: "FEMININO",
      dataNascimento: {
        $gte: ISODate("1995-01-01"),
        $lte: ISODate("2005-12-31")
      }
    }
  },
  { $limit: 5, }
]);

// Exercício 4: Conte quantos clientes do estado SC existem na coleção. Retorne um documento em que o campo _id contenha a UF e outro campo com o total.

db.clientes.aggregate([
  { $match:
    { "endereco.uf": "SC" },
  },
  {
    $group: {
      _id: "$endereco.uf",
      "total": { $sum: 1 }
    }
  }
]);

// Exercício 5: Agrupe os clientes por sexo . Retorne o total de clientes de cada sexo no campo total .

db.clientes.aggregate([
  { $group:
    {
      _id: "$sexo",
      total: { $sum: 1 }
    }
  }
]);

// Exercício 6: Agrupe os clientes por sexo e uf . Retorne o total de clientes de cada sexo no campo total .

db.clientes.aggregate([
  {
    $group: {
      _id: {
        estado: "$endereco.uf",
        sexo: "$sexo",
      },
      total: { $sum: 1 }
    }
  }
]);

// Exercício 7 : Utilizando a mesma agregação do exercício anterior, adicione um estágio de projeção para modificar os documentos de saída, de forma que se pareçam com o documento a seguir (não se importe com a ordem dos campos):

// {
//   "estado": "SP",
//   "sexo": "MASCULINO",
//   "total": 100
// }

db.clientes.aggregate([
  {
    $group: {
      _id: {
        estado: "$endereco.uf",
        sexo: "$sexo",
      },
      total: { $sum: 1}
    }
  },
  {
    $project: {
      _id: false,
      estado: "$_id.estado",
      sexo: "$_id.sexo",
      total: "$total"
    }
  },
  { $sort: { total: -1} }
]);

// Exercício 8 : Descubra quais são os 5 clientes que gastaram o maior valor.

db.vendas.aggregate([
  {
    $group: {
      _id: "$clienteId",
      total: { $sum: "$valorTotal" }
    }
  },
  { $sort: { total: -1 } },
  { $limit: 5 },
  {
    $lookup: {
      from: 'clientes',
      localField: '_id',
      foreignField: 'clienteId',
      as: 'NomeCliente'
    }
  },
  {
    $project: {
      _id: 0,
      Total: "$total",
      NomeDoCliente: "$NomeCliente.nome"
    }
  },
  { $unwind: "$NomeDoCliente" }
]);

// Exercício 9 : Descubra quais são os 10 clientes que gastaram o maior valor no ano de 2019 .

db.vendas.aggregate([
  {
    $group: {
      _id: {
        clienteId: "$clienteId",
        ano: { $year: "$dataVenda" }
      },
      total: { $sum: "$valorTotal" }
    }
  },
  { $sort: { total: - 1 } },
  { $limit: 10 },
  {
    $project: {
      _id: false,
      clienteId: "$_id.clienteId",
      ano: "$_id.ano",
      total: "$total"
    }
  },
  {
    $lookup: {
      from: 'clientes',
      localField: 'clienteId',
      foreignField: 'clienteId',
      as: 'cadastroCliente'
    }
  },
    // opcional
  {
    $project: {
      clienteId: "$clienteId",
      ano: "$ano",
      total: { $trunc: ["$total", 2 ] },
      NomeDoCliente: "$cadastroCliente.nome"
    }
  },
  { $unwind: "$NomeDoCliente" }
]);

// Exercício 10 : Descubra quantos clientes compraram mais de 5 vezes. Retorne um documento que contenha somente o campo clientes com o total de clientes.
// Dica: O operador $count pode simplificar sua query .

db.vendas.aggregate([
  {
    $group: {
      _id: {
        clienteId: "$clienteId",
        order: "$_id"
      },
      qtdeCompras: { $sum: 1 }
    }
  },
  {
    $group: {
       _id: "$_id.clienteId",
       qtdeCompras: { $sum: "$qtdeCompras" }
    }
  },
  { $match: { "qtdeCompras": { $gt: 5 } } },
  { $count: "clientes" }
]);

// Exercício 11 : Descubra quantos clientes compraram menos de três vezes entre os meses de Janeiro de 2020 e Março de 2020 .

db.vendas.aggregate([
  {
    $group:
    {
      _id: {
        clienteId: "$clienteId",
        order: "$_id",
        // dataVenda: "$dataVenda"
        anoVenda: { $year: "$dataVenda" },
        mesVenda: { $month: "$dataVenda" }
      },
      // qtdeCompras: { $sum: 1 }
    }
  },
  {
    $match:
    {
      "_id.anoVenda": 2020,
      "_id.mesVenda": { $gte: 1, $lte: 3 }
    }
  },
  {
    $group: {
      _id: "$_id.clienteId",
      // anoVenda: "$_id.anoVenda",
      // mesVenda: "$_id.mesVenda",
      qtdeCompras: { $sum: 1 }
    }
  },
  { $match: { qtdeCompras: { $lt: 3 } } },
  { $count: "qtdeClientesMenorQueTres" }
]);


// Exercício 12 : Descubra quais as três uf s que mais compraram no ano de 2020 . Retorne os documentos no seguinte formato:

// {
//   "totalVendas": 10,
//   "uf": "SP"
// }

// Em quantidade
db.vendas.aggregate([
  {
    $match: {
      status: { $not: { $eq: "PAGAMENTO NAO APROVADO"} }
    }
  },
  {
    $lookup: {
      from: 'clientes',
      localField: 'clienteId',
      foreignField: 'clienteId',
      as: 'dadosCliente'
    }
  },
  {
    $group: {
      _id: {
        uf: "$dadosCliente.endereco.uf",
        year: $year: "$dataVenda"
      },
      totalVendas: { $sum: 1 },
      totalEmReais: { $sum: "$valorTotal" }
    }
  },
  { $match: { $year: 2020 } },
  { $sort: { totalVendas: -1 } },
  { $limit: 3 },
  { $unwind:  "$_id" },
  {
    $project: {
      _id: false,
      totalVendas: "$totalVendas",
      uf: "$_id"
    }
  }
]);

// Retorno:
// [
//   {
//     "totalVendas": 219,
//     "uf": "PA"
//   },
//   {
//     "totalVendas": 202,
//     "uf": "MG"
//   },
//   {
//     "totalVendas": 193,
//     "uf": "RR"
//   }
// ]

// Em valor
db.vendas.aggregate([
  {
    $match: {
      status: { $not: { $eq: "PAGAMENTO NAO APROVADO"} }
    }
  },
  {
    $lookup: {
      from: 'clientes',
      localField: 'clienteId',
      foreignField: 'clienteId',
      as: 'dadosCliente'
    }
  },
  {
    $group: {
      _id: "$dadosCliente.endereco.uf",
      totalVendas: { $sum: 1 },
      totalEmReais: { $sum: "$valorTotal" }
    }
  },
  { $sort: { totalEmReais: -1 } },
  { $limit: 3 },
  { $unwind:  "$_id" },
  {
    $project: {
      _id: false,
      totalEmReais: "$totalEmReais",
      uf: "$_id"
    }
  }
]);

// Retorno:
// [
//   {
//     "totalEmReais": 2029519.65,
//     "uf": "PA"
//   },
//   {
//     "totalEmReais": 1881748.74,
//     "uf": "MG"
//   },
//   {
//     "totalEmReais": 1781406.63,
//     "uf": "RR"
//   }
// ]

// -------------------------------------------------

// Exercício 13 : Encontre qual foi o total de vendas e a média de vendas de cada uf no ano de 2019 . Ordene os resultados pelo nome da uf . Retorne os documentos no seguinte formato:

// {
//   "uf": "MG",
//   "mediaVendas": 9407.129225352113,
//   "totalVendas": 142
// }

db.vendas.aggregate([
  {
    $match: {
      dataVenda: {
        $gte: ISODate("2019-01-01"),
        $lte: ISODate("2019-12-31")
      }
    }
  },
  {
    $lookup: {
      from: 'clientes',
      localField: 'clienteId',
      foreignField: 'clienteId',
      as: 'dadosCliente'
    }
  },
  {
    $group: {
      _id: "$dadosCliente.endereco.uf",
      mediaVendas: { $avg: "$valorTotal" },
      totalVendas: { $sum: 1 }
    }
  },
  { $unwind: "$_id" },
  {
    $project: {
      _id: false,
      uf: "$_id",
      mediaVendas: "$mediaVendas",
      totalVendas: "$totalVendas"
    }
  },
  { $sort: { uf: 1 } }
]);








db.vendas.aggregate([
  {
    $group: {
      _id: "$status"
      }
  }
]);